services:
  server:
    env_file:
<<<<<<< HEAD:docker-compose.yaml
      - ./.env
    volumes:
      - ./.env:/usr/mount.d/.env
=======
      - .env
>>>>>>> 6dfa4cb (feat[#131]: start .env only importation):server/docker-compose.yml
    build:
      context: ./server/src
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    depends_on:
      - database
    environment:
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
<<<<<<< HEAD:docker-compose.yaml
    container_name: area-server
=======
      - DB_HOST=database
      - DB_PORT=${DATABASE_PORT}
    container_name: area-backend
>>>>>>> 6dfa4cb (feat[#131]: start .env only importation):server/docker-compose.yml
    networks:
      - web

  database:
    expose:
      - ${DATABASE_PORT}
    env_file:
      - ./.env
    image: postgres
    container_name: area-database
    command: -p ${DATABASE_PORT}
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - ./server/database/setup.sql:/docker-entrypoint-initdb.d/setup.sql
      - ./server/database/time.sql:/docker-entrypoint-initdb.d/time.sql
    networks:
      - web
    
  service-discord:
    env_file:
      - .env
    container_name: area-service-discord
    build:
      context: ./server/services/discord
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.discord.rule=PathPrefix(`/service/discord/`)"
      - "traefik.http.services.discord.loadbalancer.server.port=80"
      - "traefik.http.routers.discord.middlewares=stripprefix-service-discord"
      - "traefik.http.middlewares.stripprefix-service-discord.stripprefix.prefixes=/service/discord"
    environment:
      - BACKEND_KEY=${BACKEND_KEY}
      - REDIRECT=${REDIRECT}
      - DB_HOST=database
      - DB_PORT=${DATABASE_PORT}
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
    networks:
      - web
  
  service-spotify:
    env_file:
      - .env
    container_name: area-service-spotify
    build:
      context: ./services/spotify
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.spotify.rule=PathPrefix(`/service/spotify/`)"
      - "traefik.http.services.spotify.loadbalancer.server.port=80"
      - "traefik.http.routers.spotify.middlewares=stripprefix-service-spotify"
      - "traefik.http.middlewares.stripprefix-service-spotify.stripprefix.prefixes=/service/spotify"
    environment:
      - BACKEND_KEY=${BACKEND_KEY}
      - REDIRECT=${REDIRECT}
      - DB_HOST=database
      - DB_PORT=${DATABASE_PORT}
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
    networks:
      - web

  service-outlook:
    env_file:
      - .env
    container_name: area-service-outlook
    build:
      context: ./services/outlook
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.outlook.rule=PathPrefix(`/service/outlook/`)"
      - "traefik.http.services.outlook.loadbalancer.server.port=80"
      - "traefik.http.routers.outlook.middlewares=stripprefix-service-outlook"
      - "traefik.http.middlewares.stripprefix-service-outlook.stripprefix.prefixes=/service/outlook"
    environment:
      - BACKEND_KEY=${BACKEND_KEY}
      - REDIRECT=${REDIRECT}
      - DB_HOST=database
      - DB_PORT=${DATABASE_PORT}
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
    networks:
      - web
    
  service-time:
    env_file:
      - ./.env
    container_name: area-service-time
    build:
      context: ./server/services/time
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.time.rule=PathPrefix(`/service/time/`)"
      - "traefik.http.services.time.loadbalancer.server.port=80"
      - "traefik.http.routers.time.middlewares=stripprefix-service-time"
      - "traefik.http.middlewares.stripprefix-service-time.stripprefix.prefixes=/service/time"
    environment:
      - DB_HOST=database
      - DB_PORT=${DATABASE_PORT}
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
    networks:
      - web

  service-time:
    env_file:
      - .env
    container_name: area-service-time
    build:
      context: ./services/time
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.time.rule=PathPrefix(`/service/time/`)"
      - "traefik.http.services.time.loadbalancer.server.port=80"
      - "traefik.http.routers.time.middlewares=stripprefix-service-time"
      - "traefik.http.middlewares.stripprefix-service-time.stripprefix.prefixes=/service/time"
    environment:
      - BACKEND_KEY=${BACKEND_KEY}
      - DB_HOST=database
      - DB_PORT=${DATABASE_PORT}
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
    networks:
      - web

  service-roblox:
    env_file:
      - .env
    container_name: area-service-roblox
    build:
      context: ./services/roblox
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.roblox.rule=PathPrefix(`/service/roblox/`)"
      - "traefik.http.services.roblox.loadbalancer.server.port=80"
      - "traefik.http.routers.roblox.middlewares=stripprefix-service-roblox"
      - "traefik.http.middlewares.stripprefix-service-roblox.stripprefix.prefixes=/service/roblox"
    environment:
      - DB_HOST=database
      - DB_PORT=${DATABASE_PORT}
      - DB_USER=${DATABASE_USER}
      - DB_PASSWORD=${DATABASE_PASSWORD}
      - DB_NAME=${DATABASE_NAME}
    networks:
      - web
    volumes:
    - ./services/roblox/.env:/usr/mount.d/.env

  reverse-proxy:
    image: traefik:v${TRAEFIK_VERSION}
    container_name: area-traefik
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:${TRAEFIK_PORT}"
    ports:
      - "${TRAEFIK_PORT}:${TRAEFIK_PORT}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - web

  client_web:
    env_file:
      - ./.env
    container_name: area-client-web
    build:
      context: ./web
    ports:
      - ${WEB_PORT}:3000
    networks:
      - web
    depends_on:
      - server
      - client_mobile
    volumes:
      - apk_volume:/app/src/apk

  client_mobile:
    build:
      context: ./mobile
    volumes:
      - apk_volume:/apk_volume
    container_name: area-client-mobile
    networks:
      - web

networks:
  web:
    external: false

volumes:
  apk_volume:
